<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006">
	<SolidColorBrush
		Color="Brown"
		x:Key="themeActiveColor" />
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="NormalBrush">
		<GradientStop
			Color="#EEE"
			Offset="0.0" />
		<GradientStop
			Color="#CCC"
			Offset="1.0" />
	</LinearGradientBrush>
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="NormalBorderBrush">
		<GradientStop
			Color="#CCC"
			Offset="0.0" />
		<GradientStop
			Color="#444"
			Offset="1.0" />
	</LinearGradientBrush>
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="LightBrush">
		<GradientStop
			Color="#FFF"
			Offset="0.0" />
		<GradientStop
			Color="#EEE"
			Offset="1.0" />
	</LinearGradientBrush>
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="MouseOverBrush">
		<GradientStop
			Color="#FFF"
			Offset="0.0" />
		<GradientStop
			Color="#AAA"
			Offset="1.0" />
	</LinearGradientBrush>
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="PressedBrush">
		<GradientStop
			Color="#BBB"
			Offset="0.0" />
		<GradientStop
			Color="#EEE"
			Offset="0.1" />
		<GradientStop
			Color="#EEE"
			Offset="0.9" />
		<GradientStop
			Color="#FFF"
			Offset="1.0" />
	</LinearGradientBrush>
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="PressedBorderBrush">
		<GradientStop
			Color="#444"
			Offset="0.0" />
		<GradientStop
			Color="#888"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#DDD"
		x:Key="SelectedBackgroundBrush" />
	<SolidColorBrush
		Color="#888"
		x:Key="DisabledForegroundBrush" />
	<SolidColorBrush
		Color="#EEE"
		x:Key="DisabledBackgroundBrush" />
	<SolidColorBrush
		Color="#AAA"
		x:Key="DisabledBorderBrush" />
	<SolidColorBrush
		Color="#FFF"
		x:Key="WindowBackgroundBrush" />
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="DefaultedBorderBrush">
		<GradientStop
			Color="#777"
			Offset="0.0" />
		<GradientStop
			Color="#000"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#888"
		x:Key="SolidBorderBrush" />
	<SolidColorBrush
		Color="#AAA"
		x:Key="LightBorderBrush" />
	<SolidColorBrush
		Color="#DDD"
		x:Key="LightColorBrush" />
	<SolidColorBrush
		Color="#444"
		x:Key="GlyphBrush" />
	<Style
		x:Key="SimpleButtonFocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
							Margin="2"
							Stroke="#60000000"
							StrokeThickness="1"
							StrokeDashArray="1 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Button}"
		BasedOn="{x:Null}"
		x:Key="SimpleButton">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{DynamicResource SimpleButtonFocusVisual}" />
		<Setter
			Property="Background"
			Value="{DynamicResource NormalBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Button}">
					<Grid
						Name="Grid">
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}" />
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsKeyboardFocused"
							Value="True">
							<Setter
								Value="{DynamicResource DefaultedBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource MouseOverBrush}"
								TargetName="Border"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource PressedBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource PressedBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="True" />
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="RadioButtonFocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
							Margin="15,0,0,0"
							Stroke="#60000000"
							StrokeThickness="1"
							StrokeDashArray="1 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="CheckBoxFocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
							Margin="15,0,0,0"
							Stroke="#60000000"
							StrokeThickness="1"
							StrokeDashArray="1 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type CheckBox}"
		x:Key="SimpleCheckBox">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{DynamicResource CheckBoxFocusVisual}" />
		<Setter
			Property="Background"
			Value="{DynamicResource NormalBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type CheckBox}">
					<BulletDecorator
						Background="#00FFFFFF">
						<BulletDecorator.Bullet>
							<Grid
								Width="13"
								Height="13">
								<Border
									Name="Border"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" />
								<Path
									Name="CheckMark"
									Stroke="{DynamicResource GlyphBrush}"
									StrokeThickness="2"
									SnapsToDevicePixels="False"
									Data="M0,0 L13,13 M0,13 L13,0" />
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="false">
							<Setter
								TargetName="CheckMark"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource MouseOverBrush}"
								TargetName="Border"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource PressedBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource PressedBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type RadioButton}"
		x:Key="SimpleRadioButton">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{DynamicResource RadioButtonFocusVisual}" />
		<Setter
			Property="Background"
			Value="{DynamicResource NormalBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RadioButton}">
					<BulletDecorator
						Background="#00FFFFFF">
						<BulletDecorator.Bullet>
							<Grid
								Width="13"
								Height="13">
								<Ellipse
									Name="Ellipse_Border"
									Fill="{TemplateBinding Background}"
									Stroke="{TemplateBinding BorderBrush}"
									StrokeThickness="1" />
								<Ellipse
									Name="CheckMark"
									Margin="4"
									Fill="{DynamicResource GlyphBrush}" />
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="false">
							<Setter
								TargetName="CheckMark"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource MouseOverBrush}"
								TargetName="Ellipse_Border"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource PressedBrush}"
								TargetName="Ellipse_Border"
								Property="Fill" />
							<Setter
								Value="{DynamicResource GlyphBrush}"
								TargetName="Ellipse_Border"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Ellipse_Border"
								Property="Fill" />
							<Setter
								TargetName="Ellipse_Border"
								Property="Stroke"
								Value="#40000000" />
							<Setter
								Property="Foreground"
								Value="#80000000" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type RepeatButton}"
		BasedOn="{x:Null}"
		x:Key="SimpleRepeatButton">
		<Setter
			Property="Background"
			Value="{DynamicResource NormalBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Grid>
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" />
						<ContentPresenter
							Name="ContentPresenter"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsKeyboardFocused"
							Value="True">
							<Setter
								Value="{DynamicResource DefaultedBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource MouseOverBrush}"
								TargetName="Border"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource PressedBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource PressedBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Thumb}"
		BasedOn="{x:Null}"
		x:Key="SimpleThumbStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Grid
						Name="Grid"
						Margin="0,0,0,0">
						<Rectangle
							Name="Rectangle"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Width="Auto"
							Height="Auto"
							RadiusX="2"
							RadiusY="2"
							Fill="{DynamicResource NormalBrush}"
							Stroke="{DynamicResource NormalBorderBrush}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsFocused"
							Value="True" />
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True" />
						<Trigger
							Property="IsEnabled"
							Value="False" />
						<Trigger
							Property="Thumb.IsDragging"
							Value="True" />
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="SimpleScrollRepeatButtonStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="Foreground"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderBrush"
			Value="#00FFFFFF" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Grid>
						<Rectangle
							Fill="{TemplateBinding Background}"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="{TemplateBinding BorderThickness}" />
						<Rectangle
							Fill="{TemplateBinding Foreground}"
							Height="4" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ScrollBar}"
		x:Key="SimpleScrollBar">
		<Setter
			Property="Stylus.IsFlicksEnabled"
			Value="False" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ScrollBar}">
					<Grid
						Name="GridRoot"
						Width="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}"
						Background="{TemplateBinding Background}">
						<Grid.RowDefinitions>
							<RowDefinition
								MaxHeight="18" />
							<RowDefinition
								Height="0.00001*" />
							<RowDefinition
								MaxHeight="18" />
						</Grid.RowDefinitions>
						<RepeatButton
							Name="DecreaseRepeat"
							Style="{DynamicResource SimpleRepeatButton}"
							Command="ScrollBar.LineUpCommand">
							<Grid>
								<Path
									Name="DecreaseArrow"
									Stroke="{TemplateBinding Foreground}"
									StrokeThickness="1"
									Data="M0,4 L8,4 L4,0" />
							</Grid>
						</RepeatButton>
						<Track
							Name="PART_Track"
							Grid.Row="1"
							Orientation="Vertical"
							IsDirectionReversed="True">
							<Track.Thumb>
								<Thumb
									Style="{DynamicResource SimpleThumbStyle}" />
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton
									Name="PageUp"
									Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
									Command="ScrollBar.PageDownCommand" />
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton
									Name="PageDown"
									Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
									Command="ScrollBar.PageUpCommand" />
							</Track.DecreaseRepeatButton>
						</Track>
						<RepeatButton
							Name="IncreaseRepeat"
							Grid.Row="2"
							Style="{DynamicResource SimpleRepeatButton}"
							Command="ScrollBar.LineDownCommand">
							<Grid>
								<Path
									Name="IncreaseArrow"
									Stroke="{TemplateBinding Foreground}"
									StrokeThickness="1"
									Data="M0,0 L4,4 L8,0" />
							</Grid>
						</RepeatButton>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ScrollBar.Orientation"
							Value="Horizontal">
							<Setter
								TargetName="GridRoot"
								Property="FrameworkElement.LayoutTransform">
								<Setter.Value>
									<RotateTransform
										Angle="-90" />
								</Setter.Value>
							</Setter>
							<Setter
								TargetName="PART_Track"
								Property="Orientation"
								Value="Vertical" />
							<Setter
								TargetName="DecreaseRepeat"
								Property="Command"
								Value="ScrollBar.LineLeftCommand" />
							<Setter
								TargetName="IncreaseRepeat"
								Property="Command"
								Value="ScrollBar.LineRightCommand" />
							<Setter
								TargetName="PageDown"
								Property="Command"
								Value="ScrollBar.PageLeftCommand" />
							<Setter
								TargetName="PageUp"
								Property="Command"
								Value="ScrollBar.PageRightCommand" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ScrollViewer}"
		BasedOn="{x:Null}"
		x:Key="SimpleScrollViewer">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ScrollViewer}">
					<Grid
						Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								Width="*" />
							<ColumnDefinition
								Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition
								Height="*" />
							<RowDefinition
								Height="Auto" />
						</Grid.RowDefinitions>
						<ScrollContentPresenter
							Grid.Column="0"
							Grid.Row="0"
							Margin="{TemplateBinding Padding}"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							CanContentScroll="{TemplateBinding CanContentScroll}" />
						<ScrollBar
							Name="PART_HorizontalScrollBar"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Grid.Column="0"
							Grid.Row="1"
							Style="{DynamicResource SimpleScrollBar}"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Minimum="0"
							Maximum="{TemplateBinding ScrollableWidth}"
							Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ScrollBar
							Name="PART_VerticalScrollBar"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Grid.Column="1"
							Grid.Row="0"
							Style="{DynamicResource SimpleScrollBar}"
							Orientation="Vertical"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Minimum="0"
							Maximum="{TemplateBinding ScrollableHeight}"
							Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ListBox}"
		x:Key="SimpleListBox">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Background"
			Value="{DynamicResource WindowBackgroundBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource SolidBorderBrush}" />
		<Setter
			Property="HorizontalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="VerticalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="CanContentScroll"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ListBox}">
					<Grid>
						<Border
							Name="Border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" />
						<ScrollViewer
							Margin="1"
							Style="{DynamicResource SimpleScrollViewer}"
							Focusable="False"
							Background="{TemplateBinding Background}">
							<StackPanel
								Margin="2"
								IsItemsHost="True" />
						</ScrollViewer>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="ItemsControl.IsGrouping"
							Value="True">
							<Setter
								Property="CanContentScroll"
								Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ListBoxItem}"
		x:Key="SimpleListBoxItem">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ListBoxItem}">
					<Grid
						SnapsToDevicePixels="True">
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" />
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ListBoxItem.IsSelected"
							Value="True">
							<Setter
								Value="{DynamicResource SelectedBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderToggleButton">
		<Grid>
			<Rectangle
				Name="Rectangle"
				Margin="0,0,0,0"
				Fill="#00FFFFFF"
				Stroke="{DynamicResource NormalBorderBrush}" />
			<Path
				Name="Up_Arrow"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Fill="{DynamicResource GlyphBrush}"
				Data="M0,0 L4,4 L8,0" />
			<Path
				Name="Down_Arrow"
				Visibility="Collapsed"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Fill="{DynamicResource GlyphBrush}"
				Data="M0,4 L4,0 L8,4" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Value="{DynamicResource MouseOverBrush}"
					TargetName="Rectangle"
					Property="Fill" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Value="{DynamicResource PressedBrush}"
					TargetName="Rectangle"
					Property="Fill" />
			</Trigger>
			<Trigger
				Property="ToggleButton.IsChecked"
				Value="true">
				<Setter
					TargetName="Down_Arrow"
					Property="Visibility"
					Value="Visible" />
				<Setter
					TargetName="Up_Arrow"
					Property="Visibility"
					Value="Collapsed" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Value="{DynamicResource DisabledBackgroundBrush}"
					TargetName="Rectangle"
					Property="Fill" />
				<Setter
					Value="{DynamicResource DisabledBorderBrush}"
					TargetName="Rectangle"
					Property="Stroke" />
				<Setter
					Value="{DynamicResource DisabledForegroundBrush}"
					Property="Foreground" />
				<Setter
					Value="{DynamicResource DisabledForegroundBrush}"
					TargetName="Up_Arrow"
					Property="Fill" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style
		TargetType="{x:Type Expander}"
		x:Key="SimpleExpander">
		<Setter
			Property="Background"
			Value="{DynamicResource LightBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Expander}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition
								Height="Auto" />
							<RowDefinition
								Name="ContentRow"
								Height="*" />
						</Grid.RowDefinitions>
						<Border
							Name="Border"
							Grid.Row="0"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="2,2,0,0">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="20" />
									<ColumnDefinition
										Width="*" />
								</Grid.ColumnDefinitions>
								<ToggleButton
									Template="{DynamicResource ExpanderToggleButton}"
									Background="{DynamicResource NormalBrush}"
									OverridesDefaultStyle="True"
									IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ContentPresenter
									Grid.Column="1"
									Margin="4"
									RecognizesAccessKey="True"
									ContentSource="Header" />
							</Grid>
						</Border>
						<Border
							Name="ExpandSite"
							Visibility="Collapsed"
							Grid.Row="1"
							Background="{DynamicResource WindowBackgroundBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}"
							BorderThickness="1,0,1,1"
							CornerRadius="0,0,2,2">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Focusable="False" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="Expander.IsExpanded"
							Value="True">
							<Setter
								TargetName="ExpandSite"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate
		TargetType="{x:Type ToggleButton}"
		x:Key="ComboBoxToggleButton">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition
					Width="20" />
			</Grid.ColumnDefinitions>
			<Rectangle
				Name="Rectangle"
				Grid.ColumnSpan="2"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Width="Auto"
				Height="Auto"
				RadiusX="5"
				RadiusY="5"
				Fill="{DynamicResource NormalBrush}"
				Stroke="{DynamicResource NormalBorderBrush}" />
			<Rectangle
				Grid.Column="0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Width="Auto"
				Height="Auto"
				RadiusX="5"
				RadiusY="5"
				Fill="{DynamicResource WindowBackgroundBrush}"
				Stroke="{DynamicResource NormalBorderBrush}" />
			<Path
				Name="Arrow"
				Grid.Column="1"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Fill="{DynamicResource GlyphBrush}"
				Data="M0,0 L4,4 L8,0" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Value="{DynamicResource MouseOverBrush}"
					TargetName="Rectangle"
					Property="Fill" />
			</Trigger>
			<Trigger
				Property="ToggleButton.IsChecked"
				Value="true">
				<Setter
					Value="{DynamicResource PressedBrush}"
					TargetName="Rectangle"
					Property="Fill" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Value="{DynamicResource DisabledBackgroundBrush}"
					TargetName="Rectangle"
					Property="Fill" />
				<Setter
					Value="{DynamicResource DisabledBorderBrush}"
					TargetName="Rectangle"
					Property="Stroke" />
				<Setter
					Value="{DynamicResource DisabledForegroundBrush}"
					Property="Foreground" />
				<Setter
					Value="{DynamicResource DisabledForegroundBrush}"
					TargetName="Arrow"
					Property="Fill" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate
		TargetType="{x:Type TextBox}"
		x:Key="ComboBoxTextBox">
		<Border
			Name="PART_ContentHost"
			Focusable="False"
			Background="{TemplateBinding Background}" />
	</ControlTemplate>
	<Style
		TargetType="{x:Type ComboBox}"
		x:Key="SimpleComboBox">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ComboBox}">
					<Grid>
						<ToggleButton
							Name="ToggleButton"
							Grid.Column="2"
							Template="{DynamicResource ComboBoxToggleButton}"
							Focusable="False"
							ClickMode="Press"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ContentPresenter
							Name="ContentSite"
							HorizontalAlignment="Left"
							Margin="3,3,23,3"
							VerticalAlignment="Center"
							Content="{TemplateBinding SelectionBoxItem}"
							ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							IsHitTestVisible="False" />
						<TextBox
							Name="PART_EditableTextBox"
							Visibility="Hidden"
							Template="{DynamicResource ComboBoxTextBox}"
							HorizontalAlignment="Left"
							Margin="3,3,23,3"
							VerticalAlignment="Center"
							Focusable="True"
							Background="#00FFFFFF"
							IsReadOnly="{TemplateBinding IsReadOnly}"
							Style="{x:Null}" />
						<Popup
							Name="Popup"
							IsOpen="{TemplateBinding IsDropDownOpen}"
							Placement="Bottom"
							Focusable="False"
							AllowsTransparency="True"
							PopupAnimation="Slide">
							<Grid
								Name="DropDown"
								MaxHeight="{TemplateBinding MaxDropDownHeight}"
								MinWidth="{TemplateBinding ActualWidth}"
								SnapsToDevicePixels="True">
								<Border
									Name="DropDownBorder"
									Background="{DynamicResource WindowBackgroundBrush}"
									BorderBrush="{DynamicResource SolidBorderBrush}"
									BorderThickness="1" />
								<ScrollViewer
									Margin="4,6,4,6"
									Style="{DynamicResource SimpleScrollViewer}"
									SnapsToDevicePixels="True"
									HorizontalScrollBarVisibility="Auto"
									VerticalScrollBarVisibility="Auto"
									CanContentScroll="True">
									<StackPanel
										IsItemsHost="True"
										KeyboardNavigation.DirectionalNavigation="Contained" />
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ItemsControl.HasItems"
							Value="False">
							<Setter
								TargetName="DropDownBorder"
								Property="MinHeight"
								Value="95" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
						<Trigger
							Property="ItemsControl.IsGrouping"
							Value="True">
							<Setter
								Property="CanContentScroll"
								Value="False" />
						</Trigger>
						<Trigger
							SourceName="Popup"
							Property="Popup.AllowsTransparency"
							Value="True">
							<Setter
								TargetName="DropDownBorder"
								Property="Border.CornerRadius"
								Value="4" />
							<Setter
								TargetName="DropDownBorder"
								Property="Margin"
								Value="0,2,0,0" />
						</Trigger>
						<Trigger
							Property="ComboBox.IsEditable"
							Value="True">
							<Setter
								Property="IsTabStop"
								Value="False" />
							<Setter
								TargetName="PART_EditableTextBox"
								Property="Visibility"
								Value="Visible" />
							<Setter
								TargetName="ContentSite"
								Property="Visibility"
								Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ComboBoxItem}"
		x:Key="SimpleComboBoxItem">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ComboBoxItem}">
					<Grid
						SnapsToDevicePixels="True">
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" />
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ComboBoxItem.IsHighlighted"
							Value="True">
							<Setter
								Value="{DynamicResource SelectedBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ProgressBar}"
		x:Key="SimpleProgressBar">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ProgressBar}">
					<Grid>
						<Border
							Name="PART_Track"
							Background="{DynamicResource PressedBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}"
							BorderThickness="1"
							CornerRadius="2" />
						<Border
							Name="PART_Indicator"
							HorizontalAlignment="Left"
							Background="{DynamicResource MouseOverBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"
							BorderThickness="1"
							CornerRadius="2" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type TextBox}"
		x:Key="SimpleTextBox">
		<Setter
			Property="KeyboardNavigation.TabNavigation"
			Value="None" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="UIElement.AllowDrop"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TextBox}">
					<Grid>
						<Border
							Name="Border"
							Background="{DynamicResource WindowBackgroundBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}"
							BorderThickness="1"
							Padding="2"
							CornerRadius="2">
							<ScrollViewer
								Name="PART_ContentHost"
								Margin="0"
								Style="{DynamicResource SimpleScrollViewer}"
								Background="{TemplateBinding Background}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="BorderBrush" />
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Label}"
		x:Key="SimpleLabel">
		<Setter
			Property="HorizontalContentAlignment"
			Value="Left" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Top" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Label}">
					<Grid>
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False" />
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Menu}"
		x:Key="SimpleMenu">
		<Setter
			Property="Background"
			Value="{DynamicResource LightBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Menu}">
					<Grid>
						<Border
							Name="Border"
							Margin="1"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" />
						<StackPanel
							Background="{TemplateBinding Background}"
							IsItemsHost="True"
							ClipToBounds="True"
							Orientation="Horizontal" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<DropShadowBitmapEffect
		ShadowDepth="1.5"
		Softness="0.15"
		x:Key="PopupDropShadow" />
	<Style
		TargetType="{x:Type MenuItem}"
		x:Key="SimpleMenuItem">
		<Setter
			Property="HorizontalContentAlignment"
			Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="VerticalContentAlignment"
			Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource SystemColors.MenuTextBrushKey}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type MenuItem}">
					<Border
						Name="Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									MinWidth="17"
									Width="Auto"
									SharedSizeGroup="MenuItemIconColumnGroup" />
								<ColumnDefinition
									Width="*" />
								<ColumnDefinition
									Width="Auto"
									SharedSizeGroup="MenuItemIGTColumnGroup" />
								<ColumnDefinition
									Width="14" />
							</Grid.ColumnDefinitions>
							<ContentPresenter
								Name="Icon"
								Margin="4,0,6,0"
								VerticalAlignment="Center"
								ContentSource="Icon" />
							<Grid
								Name="GlyphPanel"
								Visibility="Hidden"
								Margin="4,0,6,0"
								VerticalAlignment="Center">
								<Path
									Name="GlyphPanelpath"
									VerticalAlignment="Center"
									Fill="{TemplateBinding Foreground}"
									Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6"
									FlowDirection="LeftToRight" />
							</Grid>
							<ContentPresenter
								Name="HeaderHost"
								Grid.Column="1"
								Margin="{TemplateBinding Padding}"
								RecognizesAccessKey="True"
								ContentSource="Header" />
							<Grid
								Name="ArrowPanel"
								Column="3"
								Margin="4,0,6,0"
								VerticalAlignment="Center">
								<Path
									Name="ArrowPanelPath"
									VerticalAlignment="Center"
									Fill="{TemplateBinding Foreground}"
									Data="M0,0 L0,8 L4,4" />
							</Grid>
							<Popup
								Name="SubMenuPopup"
								Placement="Right"
								Focusable="False"
								AllowsTransparency="True"
								PopupAnimation="{DynamicResource SystemParameters.MenuPopupAnimationKey}"
								VerticalOffset="-3"
								IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
								<Grid
									Name="SubMenu">
									<Border
										Name="SubMenuBorder"
										Background="{DynamicResource WindowBackgroundBrush}"
										BorderBrush="{DynamicResource SolidBorderBrush}"
										BorderThickness="1" />
									<StackPanel
										IsItemsHost="True"
										KeyboardNavigation.DirectionalNavigation="Cycle" />
								</Grid>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="MenuItem.Role"
							Value="TopLevelHeader">
							<Setter
								Property="Margin"
								Value="0,1,0,1" />
							<Setter
								Property="Padding"
								Value="6,3,6,3" />
							<Setter
								Property="Grid.IsSharedSizeScope"
								Value="True" />
							<Setter
								TargetName="SubMenuPopup"
								Property="Placement"
								Value="Bottom" />
							<Setter
								TargetName="ArrowPanel"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="MenuItem.Role"
							Value="TopLevelItem">
							<Setter
								Property="Margin"
								Value="0,1,0,1" />
							<Setter
								Property="Padding"
								Value="6,3,6,3" />
							<Setter
								TargetName="ArrowPanel"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="MenuItem.Role"
							Value="SubmenuHeader">
							<Setter
								Property="Dock"
								Value="Top" />
							<Setter
								Property="Padding"
								Value="0,2,0,2" />
							<Setter
								Property="Grid.IsSharedSizeScope"
								Value="True" />
						</Trigger>
						<Trigger
							Property="MenuItem.Role"
							Value="SubmenuItem">
							<Setter
								Property="Dock"
								Value="Top" />
							<Setter
								Property="Padding"
								Value="0,2,0,2" />
							<Setter
								TargetName="ArrowPanel"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="MenuItem.IsSuspendingPopupAnimation"
							Value="True">
							<Setter
								TargetName="SubMenuPopup"
								Property="PopupAnimation"
								Value="None" />
						</Trigger>
						<Trigger
							Property="MenuItem.Icon"
							Value="{x:Null}">
							<Setter
								TargetName="Icon"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="MenuItem.IsChecked"
							Value="True">
							<Setter
								TargetName="GlyphPanel"
								Property="Visibility"
								Value="Visible" />
							<Setter
								TargetName="Icon"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							SourceName="SubMenuPopup"
							Property="Popup.AllowsTransparency"
							Value="True">
							<Setter
								TargetName="SubMenu"
								Property="Margin"
								Value="0,0,3,3" />
							<Setter
								TargetName="SubMenu"
								Property="UIElement.SnapsToDevicePixels"
								Value="True" />
							<Setter
								Value="{DynamicResource PopupDropShadow}"
								TargetName="SubMenuBorder"
								Property="UIElement.BitmapEffect" />
						</Trigger>
						<Trigger
							Property="MenuItem.IsHighlighted"
							Value="True">
							<Setter
								Value="{DynamicResource SystemColors.HighlightBrushKey}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource SystemColors.HighlightTextBrushKey}"
								Property="Foreground" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource SystemColors.GrayTextBrushKey}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Separator}"
		x:Key="SimpleSeparator">
		<Setter
			Property="Height"
			Value="1" />
		<Setter
			Property="Margin"
			Value="0,2,0,2" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Separator}">
					<Border
						BorderBrush="{DynamicResource SolidBorderBrush}"
						BorderThickness="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type TabControl}"
		x:Key="SimpleTabControl">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TabControl}">
					<Grid
						KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition
								Height="Auto" />
							<RowDefinition
								Height="*" />
						</Grid.RowDefinitions>
						<TabPanel
							Name="HeaderPanel"
							Grid.Row="0"
							Margin="0,0,4,-1"
							Background="#00FFFFFF"
							IsItemsHost="True"
							ZIndex="1"
							KeyboardNavigation.TabIndex="1" />
						<Border
							Name="Border"
							Grid.Row="1"
							Background="{DynamicResource WindowBackgroundBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}"
							BorderThickness="1"
							CornerRadius="2"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabNavigation="Local"
							KeyboardNavigation.TabIndex="2">
							<ContentPresenter
								Name="PART_SelectedContentHost"
								Margin="4"
								ContentSource="SelectedContent" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type TabItem}"
		x:Key="SimpleTabItem">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TabItem}">
					<Grid>
						<Border
							Name="Border"
							Margin="0,0,-4,0"
							Background="{DynamicResource LightBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}"
							BorderThickness="1,1,1,1"
							CornerRadius="2,12,0,0">
							<ContentPresenter
								Name="ContentSite"
								HorizontalAlignment="Center"
								Margin="12,2,12,2"
								VerticalAlignment="Center"
								RecognizesAccessKey="True"
								ContentSource="Header" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="TabItem.IsSelected"
							Value="True">
							<Setter
								Property="Panel.ZIndex"
								Value="100" />
							<Setter
								Value="{DynamicResource WindowBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								TargetName="Border"
								Property="BorderThickness"
								Value="1,1,1,0" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
							<Setter
								Value="{DynamicResource DisabledForegroundBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Thumb}"
		x:Key="SimpleSliderThumb">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Height"
			Value="14" />
		<Setter
			Property="Width"
			Value="14" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Grid>
						<Ellipse
							Name="Ellipse"
							Fill="{DynamicResource NormalBrush}"
							Stroke="{DynamicResource NormalBorderBrush}"
							StrokeThickness="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource MouseOverBrush}"
								TargetName="Ellipse"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Ellipse"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Slider}"
		x:Key="SimpleSlider">
		<Setter
			Property="Background"
			Value="{DynamicResource LightBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource NormalBorderBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Slider}">
					<Grid
						Name="GridRoot">
						<Grid.RowDefinitions>
							<RowDefinition
								Height="Auto" />
							<RowDefinition
								Height="Auto"
								MinHeight="{TemplateBinding MinHeight}" />
							<RowDefinition
								Height="Auto" />
						</Grid.RowDefinitions>
						<TickBar
							Name="TopTick"
							Visibility="Collapsed"
							Height="4"
							SnapsToDevicePixels="True"
							Placement="Top"
							Fill="{DynamicResource GlyphBrush}" />
						<Border
							Name="Border"
							Grid.Row="1"
							Margin="0"
							Height="4"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="2" />
						<Track
							Name="PART_Track"
							Grid.Row="1">
							<Track.Thumb>
								<Thumb
									Style="{DynamicResource SimpleSliderThumb}" />
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton
									Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
									Command="Slider.IncreaseLarge" />
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton
									Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
									Foreground="{DynamicResource themeActiveColor}"
									Command="Slider.DecreaseLarge" />
							</Track.DecreaseRepeatButton>
						</Track>
						<TickBar
							Name="BottomTick"
							Visibility="Collapsed"
							Grid.Row="2"
							Height="4"
							SnapsToDevicePixels="True"
							Placement="Bottom"
							Fill="{TemplateBinding Foreground}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="Slider.TickPlacement"
							Value="TopLeft">
							<Setter
								TargetName="TopTick"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<Trigger
							Property="Slider.TickPlacement"
							Value="BottomRight">
							<Setter
								TargetName="BottomTick"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<Trigger
							Property="Slider.TickPlacement"
							Value="Both">
							<Setter
								TargetName="TopTick"
								Property="Visibility"
								Value="Visible" />
							<Setter
								TargetName="BottomTick"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledBackgroundBrush}"
								TargetName="Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource DisabledBorderBrush}"
								TargetName="Border"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="Slider.Orientation"
							Value="Vertical">
							<Setter
								TargetName="GridRoot"
								Property="FrameworkElement.LayoutTransform">
								<Setter.Value>
									<RotateTransform
										Angle="-90" />
								</Setter.Value>
							</Setter>
							<Setter
								TargetName="PART_Track"
								Property="Orientation"
								Value="Horizontal" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type TreeView}"
		x:Key="SimpleTreeView">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TreeView}">
					<Grid>
						<Border
							Name="Border"
							Background="{DynamicResource WindowBackgroundBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}"
							BorderThickness="1"
							CornerRadius="1">
							<ScrollViewer
								Style="{DynamicResource SimpleScrollViewer}"
								Focusable="False"
								Background="{TemplateBinding Background}"
								Padding="4"
								HorizontalScrollBarVisibility="Auto"
								VerticalScrollBarVisibility="Auto"
								CanContentScroll="False">
								<ItemsPresenter />
							</ScrollViewer>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="SimpleTreeViewItemToggleButton">
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid
						Width="15"
						Height="13"
						Background="#00FFFFFF">
						<Path
							Name="IsExpandedPath"
							Visibility="Collapsed"
							HorizontalAlignment="Left"
							Margin="1,1,1,1"
							VerticalAlignment="Center"
							Fill="{DynamicResource GlyphBrush}"
							Data="M0,4 L8,4 L4,8" />
						<Path
							Name="ExpandPath"
							HorizontalAlignment="Left"
							Margin="1,1,1,1"
							VerticalAlignment="Center"
							Fill="{DynamicResource GlyphBrush}"
							Data="M4,0 L8,4 L4,8" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="True">
							<Setter
								TargetName="IsExpandedPath"
								Property="Visibility"
								Value="Visible" />
							<Setter
								TargetName="ExpandPath"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type TreeViewItem}"
		x:Key="SimpleTreeViewItem">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="VerticalContentAlignment"
			Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="Padding"
			Value="1,0,0,0" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								MinWidth="19"
								Width="Auto" />
							<ColumnDefinition
								Width="Auto" />
							<ColumnDefinition
								Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition
								Height="Auto" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<ToggleButton
							Name="Expander"
							Style="{DynamicResource SimpleTreeViewItemToggleButton}"
							ClickMode="Press"
							IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="Selection_Border"
							Grid.Column="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter
								Name="PART_Header"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								ContentSource="Header" />
						</Border>
						<ItemsPresenter
							Name="ItemsHost"
							Grid.Column="1"
							Grid.ColumnSpan="2"
							Grid.Row="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="TreeViewItem.IsExpanded"
							Value="False">
							<Setter
								TargetName="ItemsHost"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="ItemsControl.HasItems"
							Value="False">
							<Setter
								TargetName="Expander"
								Property="Visibility"
								Value="Hidden" />
						</Trigger>
						<Trigger
							Property="TreeViewItem.IsSelected"
							Value="True">
							<Setter
								Value="{DynamicResource SystemColors.HighlightBrushKey}"
								TargetName="Selection_Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource SystemColors.HighlightTextBrushKey}"
								Property="Foreground" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="TreeViewItem.IsSelected"
									Value="True" />
								<Condition
									Property="TreeViewItem.IsSelectionActive"
									Value="False" />
							</MultiTrigger.Conditions>
							<Setter
								Value="{DynamicResource SystemColors.ControlBrushKey}"
								TargetName="Selection_Border"
								Property="Background" />
							<Setter
								Value="{DynamicResource SystemColors.ControlTextBrushKey}"
								Property="Foreground" />
						</MultiTrigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource SystemColors.GrayTextBrushKey}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
